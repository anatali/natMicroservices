/*
================================================================================
build.gradle
USAGE:	 
	gradle eclipse	//to set the dependency on the library
	gradle build
================================================================================
*/
apply plugin: 'java'
apply plugin: 'eclipse' 

apply plugin: 'jacoco'
 
version = "1.0"
sourceCompatibility = "1.8"
sourceSets {
    main {
        java { srcDirs = ['src' ] 	}
    }
    test {
        java { srcDirs = ['test' ]   }
    }
}
repositories {
    mavenCentral()
}
dependencies {
    testCompile 'junit:junit:4.12'
	//compile group: 'com.typesafe.akka', name: 'akka-actor_2.11', version: '2.4.8'
	//compile group: 'com.typesafe.akka', name: 'akka-remote_2.11', version: '2.4.9-RC2'
	// https://mvnrepository.com/artifact/org.scream3r/jssc
	compile group: 'org.scream3r', name: 'jssc', version: '2.8.0'
	// https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
	compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.1.0'
	// https://mvnrepository.com/artifact/net.sf.bluecove/bluecove
	//compile group: 'net.sf.bluecove', name: 'bluecove', version: '2.1.0'	//does not work for Raspi
	//'net.sf.bluecove:bluecove:2.1.1-SNAPSHOT' //???
//LOCAL LIBS
	compile fileTree(dir: './lib', include: 'bluecove-2.1.1-SNAPSHOT.jar') //for raspi
 	compile fileTree(dir: './lib', include: 'uniboInterfaces.jar')
 }
jar {
    manifest {
        attributes "Class-Path": configurations.compile.collect { "lib/"+it.getName() }.join(' ')
        attributes 'Main-Class': 'Library'
    }
}
test {
	testLogging {
		outputs.upToDateWhen { false }		
		showStandardStreams = true		
		events 'failed' , 'passed' //,  'started', 'skipped', 		
	}
	
	//include '**/TestLed.class'
	include '**/Test*.class'
	test.afterSuite { TestDescriptor suite, TestResult result -> //add closure to be notified
	if( !suite.parent && result.getTestCount() > 0) { //there is at least one test
		long elapsedTestTime = result.getEndTime() - result.getStartTime()
 		System.out.println("""AFTERTEST Elapsed time for execution of ${result.getTestCount()} test(s):  $elapsedTestTime ms""");
	}
	}
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
     reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}
/*
*  Generated by AN Unibo
*/
package it.unibo.platform.udp;
import it.unibo.is.interfaces.IOutputView;
import it.unibo.is.interfaces.protocols.IConnInteraction;
import it.unibo.is.interfaces.protocols.IUdpConnection;
import java.net.DatagramSocket;

public class SocketUdpSupport  implements IUdpConnection{
 	private boolean debug = false;
	private IOutputView view;
	private DatagramSocket socket;
	private int portNum;
	
	public SocketUdpSupport(String logo,IOutputView view) {
 		this.view   = view ;
		if( System.getProperty("udpTrace") != null ) 
			debug = System.getProperty("udpTrace").equals("set") ;
	}
	
	
	public  DatagramSocket connectAsReceiver(int portNum) throws Exception {
	try{
 		println( "connectAsReceiver on port " + portNum );
 		this.portNum = portNum;
		socket = new DatagramSocket( portNum );		
		return socket;		
	}catch( Exception e ){
		println("connectAsReceiver ERROR  *** " + portNum + " " + e.getMessage() );
		throw e;
	}
	}
	
	

	public DatagramSocket connectAsClient(String hostName,  int portNum) throws Exception {
//		InetAddress ia = InetAddress.getByName(hostName);
		DatagramSocket socket;
		socket = new DatagramSocket(  ); //if no arg => anonymous
//		socket = new DatagramSocket( sendPort ); //if no arg => anonymous
		println( "connectAsClient connected to port " + portNum + " using " +socket.getLocalPort()  );
		return socket;
	}	

	
	public void closeConnection(DatagramSocket socket){
		println( "CLOSING" );
		socket.close();
	}
	
	protected  void println( String msg){
		 if( debug ) 
			 doprintln("		+++ SocketUdpSupport |"   + " " + msg  );
	}

	protected  void doprintln( String msg){
		if( view != null )
			view.addOutput(msg);
		else System.out.println(msg  );		
	}	
}

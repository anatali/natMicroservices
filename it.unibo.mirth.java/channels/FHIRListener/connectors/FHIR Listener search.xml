<connector version="3.9.0">
  <metaDataId>7</metaDataId>
  <name>search</name>
  <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.9.0">
    <pluginProperties/>
    <destinationConnectorProperties version="3.9.0">
      <queueEnabled>false</queueEnabled>
      <sendFirst>false</sendFirst>
      <retryIntervalMillis>10000</retryIntervalMillis>
      <regenerateTemplate>false</regenerateTemplate>
      <retryCount>0</retryCount>
      <rotate>false</rotate>
      <includeFilterTransformer>false</includeFilterTransformer>
      <threadCount>1</threadCount>
      <threadAssignmentVariable></threadAssignmentVariable>
      <validateResponse>false</validateResponse>
      <resourceIds class="linked-hash-map">
        <entry>
          <string>Default Resource</string>
          <string>[Default Resource]</string>
        </entry>
      </resourceIds>
      <queueBufferSize>1000</queueBufferSize>
      <reattachAttachments>true</reattachAttachments>
    </destinationConnectorProperties>
    <script>try {
    var fhirVersion = $(&apos;fhirVersion&apos;);
    var type = $(&apos;fhirType&apos;).toLowerCase();
    var requestURL = $(&apos;url&apos;);
    if (!requestURL.endsWith(&apos;/&apos;)) {
        requestURL += &apos;/&apos;;
    }
    var requestURL = new java.net.URI(requestURL);

    // Add more supported parameters as you see fit
    var supportedParameters = [
        // General
        &apos;_format&apos;,
        // All resources
        &apos;_content&apos;,
        &apos;_id&apos;,
        &apos;_lastupdated&apos;,
        // Results
        &apos;_count&apos;,
    ]

    // Add more supported parameters as you see fit
    var supportedTypeParameters = {
        patient: [
            &apos;identifier&apos;,
            &apos;name&apos;,
            &apos;given&apos;,
            &apos;family&apos;
        ],
        schedule: [
            &apos;identifier&apos;,
            &apos;actor&apos;
        ],
        slot: [
            &apos;identifier&apos;,
            &apos;schedule&apos;
        ]
    }

    if (type) {
        var typeParameters = supportedTypeParameters[type.toLowerCase()];
        if (typeParameters) {
            for each (param in typeParameters) {
                supportedParameters.push(param);
            }
        }
    }

    // Uncomment this to reject requests with parameters that aren&apos;t supported
//  for each (key in $(&apos;parameters&apos;).getKeys().toArray()) {
//      if (supportedParameters.indexOf(key.toLowerCase()+&apos;&apos;) &lt; 0) {
//          return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Unknown or unsupported parameter &apos; + key + &apos;.&apos;, fhirVersion);
//      }
//  }

    var _content = $(&apos;parameters&apos;).getParameter(&apos;_content&apos;);

    var _id = $(&apos;parameters&apos;).getParameter(&apos;_id&apos;);

    var _lastUpdated = $(&apos;parameters&apos;).getParameter(&apos;_lastUpdated&apos;);
    var lastUpdatedOperator = &apos;eq&apos;;
    if (_lastUpdated) {
        try {
            if (/^(eq|ne|gt|lt|ge|le|sa|eb|ap).*/.test(_lastUpdated)) {
                lastUpdatedOperator = _lastUpdated.substr(0, 2);
                _lastUpdated = _lastUpdated.substr(2);
            }
            _lastUpdated = convertDate(_lastUpdated, &apos;yyyy-MM-dd HH:mm:ss.SSSZZ&apos;);
        } catch (e) {
            return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _lastUpdated formatted incorrectly: &apos; + _lastUpdated, fhirVersion);
        }
    }

    var _count = $(&apos;parameters&apos;).getParameter(&apos;_count&apos;);
    if (_count) {
        _count = parseInt(_count, 10);
        if (!_count) {
            return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _count formatted incorrectly: &apos; + $(&apos;parameters&apos;).getParameter(&apos;_count&apos;), fhirVersion);
        }
    }

    // Build up the WHERE clause and prepared query parameters
    var whereParts = [];
    var params = [];
    
    if (type) {
        // search-type
        whereParts.push(&quot;name = ?&quot;);
        params.push(type);
    }

    // Search on the entire content of the resource
    if (_content) {
        whereParts.push(getFhirSearchContentWherePart());
        params.push(&apos;%&apos; + _content + &apos;%&apos;);
    }

    // Logical id of the resource
    if (_id) {
        whereParts.push(&quot;id = ?&quot;);
        params.push(_id);
    }

    // When the resource version last changed
    if (_lastUpdated) {
        whereParts.push(getFhirSearchLastUpdatedWherePart(lastUpdatedOperator));
        params.push(_lastUpdated);
    }

    // Add resource-specific query expressions
    if (type == &apos;patient&apos;) {
        if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
            addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
        }
        if ($(&apos;parameters&apos;).contains(&apos;name&apos;)) {
            addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;family/@value&apos;, &apos;given/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;name&apos;)), whereParts, params);
        }
        if ($(&apos;parameters&apos;).contains(&apos;family&apos;)) {
            addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;family/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;family&apos;)), whereParts, params);
        }
        if ($(&apos;parameters&apos;).contains(&apos;given&apos;)) {
            addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;given/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;given&apos;)), whereParts, params);
        }
    } else if (type == &apos;schedule&apos;) {
        if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
            addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
        }
        if ($(&apos;parameters&apos;).contains(&apos;actor&apos;)) {
            addXPath(xpathSearch(&apos;/*/actor&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;actor&apos;)), whereParts, params);
        }
    } else if (type == &apos;slot&apos;) {
        if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
            addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
        }
        if ($(&apos;parameters&apos;).contains(&apos;schedule&apos;)) {
            addXPath(xpathSearch(&apos;/*/schedule&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;schedule&apos;)), whereParts, params);
        }
    }

    // Build up the actual query
    var usingLimit = _count &gt; 0;
    var query = getFhirSearchBaseQuery(usingLimit);
    if (whereParts.length &gt; 0) {
        query += &quot; AND &quot; + whereParts.join(&quot; AND &quot;);
    }
    query = addOrder(query, usingLimit);
    if (usingLimit) {
        query = addLimit(query, _count);
    }

    var result = executeCachedQuery(query, params);
    var bundle = new Packages.org.hl7.fhir.r4.model.Bundle().setType(Packages.org.hl7.fhir.r4.model.Bundle.BundleType.SEARCHSET);

    while (result.next()) {
        var entryType = getResultSetString(result, &apos;name&apos;);
        var entryId = getResultSetString(result, &apos;id&apos;);
        var entryVersion = result.getInt(&apos;version&apos;);
        var entryData = getResultSetString(result, &apos;data&apos;);
        var entryContentType = getResultSetString(result, &apos;mimetype&apos;);
        var entryRequestMethod = getResultSetString(result, &apos;request_method&apos;);
        var entryRequestURL = getResultSetString(result, &apos;request_url&apos;);

        var resourceType = FhirUtil.getResourceType(entryType, fhirVersion);
        if (resourceType != null) {
            entryType = resourceType.getPath();
        }

        var request = new Packages.org.hl7.fhir.r4.model.Bundle.BundleEntryRequestComponent().setMethod(new Packages.org.hl7.fhir.r4.model.Bundle.HTTPVerbEnumFactory().fromCode(entryRequestMethod)).setUrl(entryRequestURL);
        var entry = bundle.addEntry().setRequest(request);
    
        var relativeUrl = type ? &apos;&apos; : (resourceType + &apos;/&apos;);
        if ($(&apos;url&apos;).contains(&apos;_search&apos;) &amp;&amp; $(&apos;method&apos;) == &apos;POST&apos;) {
            relativeUrl = &apos;../&apos; + relativeUrl;
        }
        entry.setFullUrl(requestURL.resolve(relativeUrl + entryId + &apos;/_history/&apos; + entryVersion).toString());
        entry.setResource(FhirUtil.fromXML(entryData, fhirVersion));
    }

    bundle.setTotal(bundle.getEntry().size());;

    var response = FhirResponseFactory.getHistoryResponse(FhirUtil.toXML(bundle, fhirVersion), 200, FhirUtil.getMIMETypeXML());
    responseMap.put(&apos;response&apos;, response);
    return response.getMessage();
} catch (e) {
    return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error searching resources.&apos;, fhirVersion, 500, e);
}

/**
    Creates an XPath search selector within the given base node.

    @param String base - The base path to select within.
    @param String[] nodes - An array of child nodes to select by (combined with OR operator).
    @param String value - The value to test.
    @param Boolean equals - If true, the test will be equality, otherwise it will be a contains.
    @param Boolean caseSensitive - If true, the contains test will match using case sensitivity.
    @return The built-up contains selector.
*/
function xpathSearch(base, nodes, value, equals, caseSensitive) {
    var search = base + &quot;[&quot;;
    value = new java.lang.String(value).replaceAll(&quot;&apos;&quot;, &quot;&apos;&apos;&quot;);
    if (!caseSensitive) {
        value = value.toLowerCase();
    }
    
    for (var i = 0; i &lt; nodes.length; i++) {
        var node = convertXPathNodeSingleton(nodes[i]);
        if (!caseSensitive) {
            node = xpathLowerCase(node);
        }
        
        if (equals) {
            search += node + &quot; = &apos;&quot; + value + &quot;&apos;&quot;;
        } else {
            search += &quot;contains(&quot; + node + &quot;, &apos;&quot; + value + &quot;&apos;)&quot;;
        }
        
        if (i &lt; nodes.length - 1) {
            search += &quot; or &quot;;
        }
    }
    
    search += &quot;]&quot;;
    return search;
}</script>
  </properties>
  <transformer version="3.9.0">
    <elements/>
    <inboundDataType>FHIR</inboundDataType>
    <outboundDataType>FHIR</outboundDataType>
    <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
      <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
        <serializationType>XML</serializationType>
        <fhirVersion>R4</fhirVersion>
      </serializationProperties>
      <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
        <serializationType>JSON</serializationType>
      </deserializationProperties>
      <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
        <splitType>JavaScript</splitType>
        <batchScript></batchScript>
      </batchProperties>
    </inboundProperties>
    <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
      <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
        <serializationType>XML</serializationType>
        <fhirVersion>R4</fhirVersion>
      </serializationProperties>
      <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
        <serializationType>XML</serializationType>
      </deserializationProperties>
      <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
        <splitType>JavaScript</splitType>
        <batchScript></batchScript>
      </batchProperties>
    </outboundProperties>
  </transformer>
  <responseTransformer version="3.9.0">
    <elements/>
    <inboundDataType>FHIR</inboundDataType>
    <outboundDataType>FHIR</outboundDataType>
    <inboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
      <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
        <serializationType>RAW</serializationType>
        <fhirVersion>R4</fhirVersion>
      </serializationProperties>
      <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
        <serializationType>JSON</serializationType>
      </deserializationProperties>
      <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
        <splitType>JavaScript</splitType>
        <batchScript></batchScript>
      </batchProperties>
    </inboundProperties>
    <outboundProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDataTypeProperties" version="3.9.0">
      <serializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirSerializationProperties" version="3.9.0">
        <serializationType>RAW</serializationType>
        <fhirVersion>R4</fhirVersion>
      </serializationProperties>
      <deserializationProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirDeserializationProperties" version="3.9.0">
        <serializationType>RAW</serializationType>
      </deserializationProperties>
      <batchProperties class="com.mirth.connect.plugins.datatypes.fhir.shared.FhirBatchProperties" version="3.9.0">
        <splitType>JavaScript</splitType>
        <batchScript></batchScript>
      </batchProperties>
    </outboundProperties>
  </responseTransformer>
  <filter version="3.9.0">
    <elements/>
  </filter>
  <transportName>JavaScript Writer</transportName>
  <mode>DESTINATION</mode>
  <enabled>true</enabled>
  <waitForPrevious>true</waitForPrevious>
</connector>
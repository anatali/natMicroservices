/* 
 * prodConsDistributed.qa 
 */
System prodConsDistributed               
Dispatch info : info(X)  
Dispatch autoMsg : autoMsg(X)
  
Context  ctxBasicProdDistr ip [ host="localhost"  port=8079 ]     
Context  ctxBasicConsDistr ip [ host="localhost"  port=8089 ]   

QActor producerdistr context ctxBasicProdDistr{    
Rules{
	item(1).        
	item(2).   
} 
 	State init initial [ println( producerdistr(waiting) ) ] 	
 	switchTo doWork
 	
 	State doWork  [           
	   		[ !? item(X) ] println( producer(sends(X))  )  ;
		    [ !? item(X) ] addRule produced( item(X) );
	  		[ ?? item(X) ] selfMsg autoMsg : autoMsg( item(X) ) 
 	] 	
 	transition stopAfter 3000
 		whenMsg autoMsg -> handleAutoMsg
 	finally repeatPlan    

 	Plan handleAutoMsg  [
 		printCurrentMessage;
 		onMsg autoMsg : autoMsg(M) -> forward consumerdistr -m info : info( M )  
 	]
 	transition whenTime 1000 -> doWork  //one item/sec
  		whenMsg autoMsg -> handleAutoMsg 
   }      
 	
    
 QActor consumerdistr context ctxBasicConsDistr{   
  	State init initial  [  println( consumerdistr(waiting) ) ]
	transition whenTime 3000 -> handleTout	//consumer ends before producer
		whenMsg  info  -> handleMsg 	
	  	finally repeatPlan
  	
  	State handleMsg resumeLastPlan [
  		 printCurrentMessage  ;
  		 onMsg info : info(X) -> addRule consumed( X );
  		 onMsg info : info(X) -> println( consumerReceiving(X) )
  	] 
    State handleTout [ println( consumerdistr(tout)  )  ]  	
 }